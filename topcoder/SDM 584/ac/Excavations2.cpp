#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define PI 3.14159265359
#define REP(i,n) for(LL i=0;i<(n);++i)
#define FOR(i,k,n) for (LL i=(k); i<=(LL)(n); ++i)
#define X first
#define Y second
#define CLR(x) memset((x), 0, sizeof(x))
#define PB push_back
#define MP make_pair
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef long long LL;
typedef long double LD;
class Excavations2 {
public:
	long long count(vector <int>, vector <int>, int);
	int ct[51];
	int sum[51];
	vector<int> kind,found;
	LL helper(int n,int k){
		if(k>sum[n])return 0;
		if(n==0)return c(ct[found[n]-1],k);
		LL res=0;
		FOR(i,1,min(k-1,ct[found[n]-1])){
			res+=c(ct[found[n]-1],i)*helper(n-1,k-i);
		}
		cout<<res<<endl;
		return res;
	}

	LL c(int a,int b){
		LL ans=1;
		if(b>a)return 0;
		if(b==0)return 1;
		REP(i,b){
			ans*=(a-i);
			ans/=(i+1);
		}
		return ans;
	}
};

long long Excavations2::count(vector <int> kind, vector <int> found, int K) {
	//int ct[51];
	this->kind=kind;
	this->found=found;
	CLR(ct);
	REP(i,kind.size())ct[kind[i]-1]++;
	CLR(sum);
	sum[0]=ct[found[0]-1];
	REP(i,found.size()-1)sum[i+1]=sum[i]+ct[found[i+1]-1];
	LL ans=1;
	REP(i,found.size())if(ct[found[i]-1]==0)return 0;
	ans=helper(found.size()-1,K);
	return ans;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	Excavations2 *obj;
	long long answer;
	obj = new Excavations2();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	long long p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,1,1,2,3,4,3,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {50};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 21;
	p3 = 5567902560ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Once upon a time, there was a civilization called Ruritania. It had n building sites numbered from 0 to n-1. There were various types of buildings such as libraries, markets, and palaces. Each building type was assigned an integer from 1 to 50. The building at site i (0-based index) was of type kind[i].
// 
// With the passing of millennia, Ruritania declined and its building sites were covered in sand, concealing all the buildings. Recently, an intrepid archeologist excavated K building sites.
// 
// You are given vector <int>s kind and found as well as the int K. The types of buildings discovered by the excavation are described by the vector <int> found, which contains at most one value for each building type even if several buildings of a type were excavated.
// 
// Return the number of K-tuples of sites that could have been excavated to arrive at the given values. The answer is guaranteed to be at least one.
// 
// 
// DEFINITION
// Class:Excavations2
// Method:count
// Parameters:vector <int>, vector <int>, int
// Returns:long long
// Method signature:long long count(vector <int> kind, vector <int> found, int K)
// 
// 
// CONSTRAINTS
// -kind will contain N elements, where N is between 1 and 50, inclusive.
// -Each element of kind will be between 1 and 50, inclusive.
// -found will contain between 1 and 50 elements, inclusive.
// -Each element of found will occur in kind at least once.
// -The elements of found will be distinct.
// -K will be between the number of elements in found and N, inclusive.
// -There will exist at least one K-tuple of sites consistent with the given information.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2, 2, 1}
// {1}
// 2
// 
// Returns: 1
// 
// There are four building sites. Two contain a building of type 1 and two contain a building of type 2. The archeologist excavated two sites and only found buildings of type 1. The only possible scenario is that the archeologist excavated sites 0 and 3.
// 
// 1)
// {1, 2, 2, 1}
// {1, 2}
// 2
// 
// Returns: 4
// 
// The building sites are the same as before, but in this case buildings of type 1 and type 2 have been discovered. The archeologist must have excavated one of four possible pairs of sites: (0, 1), (0, 2), (1, 3), or (2, 3).
// 
// 2)
// {1, 2, 1, 1, 2, 3, 4, 3, 2, 2}
// {4, 2}
// 3
// 
// Returns: 6
// 
// The archeologist excavated one of six possible triples of building sites:
// 
// (1, 4, 6)
// (1, 6, 8)
// (1, 6, 9)
// (4, 6, 8)
// (4, 6, 9)
// (6, 8, 9)
// 
// 
// 3)
// {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50}
// {50}
// 21
// 
// Returns: 5567902560
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
